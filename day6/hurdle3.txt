https://reeborg.ca/reeborg.html?lang=en&mode=python&menu=worlds%2Fmenus%2Freeborg_intro_en.json&name=Harvest%203&url=worlds%2Ftutorial_en%2Fharvest3.json

hurdle3

def turn_right():
    turn_left()
    turn_left()
    turn_left()

def jump():
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()

while not at_goal():
    if fron_is_clear():    # or wall_in_front()
        move()
    else:
        jump()

hurdle4 - my solution 15 lines
def turn_right():
    turn_left()
    turn_left()
    turn_left()
   
while not at_goal():
    if (wall_on_right() and not wall_in_front()) and not right_is_clear():
        move()
    elif wall_in_front() and not right_is_clear():
        turn_left()
    elif right_is_clear():
        turn_right()
        move()
        turn_right()
        move()


hurdle4 - Angela's solution with function
def turn_right():
    turn_left()
    turn_left()
    turn_left()

def jump():
    turn_left()
    while wall_on_right():
        move()
    turn_right()
    move()
    turn_right()
    while fron_is_clear():
        move()
    turn_left

while not at_goal():
    if wall_in_front():
        jump()
    else:
        move()


# maze (it does not work when it is surrounded  by empty spaces)
def turn_right():
    turn_left()
    turn_left()
    turn_left()

while not at_goal():
    if right_is_clear():
        turn_right()
        move()
    elif fron_is_clear():
        move()
    else:
        turn_left




